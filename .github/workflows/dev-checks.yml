# This is a basic workflow to help you get started with Actions
name: Best Practices Check

# Controls when the workflow will run
on:
  pull_request:
    branches:
      - 'main'
      - 'rel-*'
      - 'TS-*' 
      - 'revert-*'
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  dev-checks:
    # The type of runner that the job will run on
    runs-on: self-hosted

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: |
          echo "$GITHUB_CONTEXT"

      - uses: actions/checkout@v3.3.0
        with:
          token: ${{ secrets.PIPELINES_REPO_TOKEN  }}
          fetch-depth: 0

      - name: Get branch name (merge)
        if: github.event_name != 'pull_request'
        shell: bash
        run: |
          echo "SOURCE_BRANCH=$(echo ${GITHUB_REF#refs/heads/} | tr / -)" >> $GITHUB_ENV
      - name: Get branch name (pull request)
        if: github.event_name == 'pull_request'
        shell: bash
        run: |
          echo "SOURCE_BRANCH=$(echo ${GITHUB_HEAD_REF} | tr / -)" >> $GITHUB_ENV
          echo "TARGET_BRANCH=$(echo ${GITHUB_BASE_REF} | tr / -)" >> $GITHUB_ENV
        
      # Check if branch name is according to the guidelines
      - name: Check branch name
        if: ${{ !startsWith(env.SOURCE_BRANCH,'TS-') && !startsWith(env.SOURCE_BRANCH,'revert-') }}
        run: |
          echo "::debug::Branch name must start with 'TS-' ${{ env.SOURCE_BRANCH }}"
          exit 1

      # Check if there is a merge conflict in the PR
      - name: Check for merge conflict in PR
        run: |
          if [ $(git grep -rln '<<<<<<< HEAD' -- ':(exclude)*dev-checks.yml') ]; then echo "Please resolve the merge conflict"; exit 1; else exit 0; fi

      - name: Check DB Migration Scripts
        id: check_db_migration
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.PIPELINES_REPO_TOKEN  }}
          script: |
            head_commit = "${{ github.sha }}"
            base_commit = "${{ github.sha }}"
            if ( "${{ github.event.before }}" != '0000000000000000000000000000000000000000') { 
              base_commit = "${{ github.event.before }}"
            }
            if ( "${{ github.event_name }}" == 'pull_request') {
              console.log("Using the base branch's commit for comparing.")
              base_commit = "${{ github.event.pull_request.base.sha  }}"
            }
            console.log("base_commit " + base_commit);
            console.log("head_commit " + head_commit); 
            response = await github.rest.repos.compareCommits({
                owner: "${{ github.repository_owner }}",
                repo: "${{  github.repository }}".split('/')[1],
                head: head_commit,
                base: base_commit
            });
            response.data.files.forEach(function(file_entry) {
              if (file_entry.filename.endsWith(".sql") && file_entry.filename.includes("db/migration/") && 
                   (file_entry.status == 'modified' || file_entry.status == 'removed')) {
                console.log(file_entry.filename);
                console.log(file_entry.status);
                core.setFailed("Modifying or removing a flyway history file " + file_entry.filename);
              }
            });
            response.data.files.forEach(function(file_entry) {
              if (file_entry.filename == 'version.txt'){
                 core.setFailed("modifying version.txt is not allowed ")
            }
            });
  
